<h1 class="doc-page-title">The days</h1>

<p>
  A calendar is basically a list of days, typically (although not necessarily)
  displayed in a grid with 7 columns. So the first thing you might want to customize is
  the content of each day.
</p>

<h3>Pass a custom class for each day</h3>

<p>
  You can pass to this component a <code>dayClass</code> argument. If this argument is a string, that
  string will be added as a class to every rendered day.
</p>

<p>
  This on itself is not amazing, but if instead of a string <code>dayClass</code> is a function, it will
  be invoked for every day, receiving the day object and the calendar. You can then implement any custom
  logic to add classes to buttons.
</p>

<p>
  Using this technique we can create complex things, like a calendar with multiple selection in which
  the selected days have a <em>"magnetic"</em> border.
</p>

{{#code-example hbs="the-days-0.hbs" js="the-days-0-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<h3>Passing a block</h3>

<p>
  There are many ways of doing it, but the simplest one is passing a block that will be
  the content of each cell of the grid. It's not the most versatile, but it can be used for
  simple customizations.
</p>

<p>
  The block receives two arguments. The first one is a useful day object and the second is the
  public API of the component. You can check the API of both objects <a href="/docs/api-reference">API reference</a> section.
</p>

<p>
  Let's start by making the number of the days of the weeked be strong and pink, because we like weekends.
</p>

{{#code-example hbs="the-days-1.hbs" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<p>
  The properties of they so called "day" object to make most common customizations easy.
</p>

<h3>Just using the public API</h3>

<p>
  Like with <a href={{href-to 'public-pages.docs.the-nav'}}>The nav</a> component, all the behaviour is
  implemented using the public API of the calendar, so you can build your calendar and replace it.
</p>

<p>
  This is a non-trivial example where I build a weird month grid that has no Mondays or Wednesdays.
  Yay short weeks!
</p>

{{#code-example hbs="the-days-2.hbs"  js="the-days-2-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<h3>Passing a custom component</h3>

<p>
  Just like with the nav component, you can encapsulate this weird grid with 5 days week into a component to
  reuse it all over the place. Maybe if you use it often enough the boss end up thinking weeks have 3 working days.
</p>

{{#code-example hbs="the-days-3.hbs" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<p>
  This options is the one that gives you more power, but it would be silly to make users create their own components
  for very common changes like customizing the start of the week and things like that, so the default <code>calendar.days</code>
  component has a few configuration options to tweak for the most common use cases.
</p>

<h3><code>startOfWeek</code></h3>

<p>
  By default, weeks will start on the appropriate day of the week based on the locale configured
  in the <code>service:power-calendar</code> (which defaults to the global locale configured in MomentJS if you are using it). There is a built in option to tweak the locale's default, pass
  <code>startOfWeek=[NUMBER]</code> to change the first day of the week. Values go from <code>0</code> (Sunday) to <code>6</code> (Saturday).
</p>

{{#code-example hbs="the-days-4.hbs" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<h3><code>showDaysAround</code></h3>

<p>
  By default the calendar displays the days of the surrounding months in the first and last week but
  if you want to hide them pass <code>showDaysAround=false</code>.
</p>

{{#code-example hbs="the-days-5.hbs" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<h3><code>minDate</code> and <code>maxDate</code></h3>

<p>
  If you want to prevent some days before a particular date from being selected, pass <code>minDate=someDate</code> and/or <code>maxDate=someOtherDate</code>.
  Dates before/after those values can be selected (those dates included), but the rest of the days cannot be selected or focused.
</p>

<p>By example, in the next example, only days between 11th and 21th can be selected (both inclusive)</p>

{{#code-example hbs="the-days-6.hbs" js="the-days-6-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<h3><code>disabledDates</code></h3>

<p>
  Sometimes you don't want to disabled dates before or after some marks but some specific list of dates, like
  holidays or birthdays. The <code>disabledDates</code> is what you want. Pass a collection of Date or Moment
  objects and those days will be disabled.
</p>

{{#code-example hbs="the-days-7.hbs" js="the-days-7-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<h3><code>weekdayFormat</code></h3>

<p>
  By default the name of the days of the week is in its abbreviated form, but you can use the <code>weekdayFormat</code>
  to change it. The accepted values are <code>short</code> (the default), <code>long</code> (the full day name) and <code>min</code> (an even shorter abbreviation).
</p>

{{#code-example hbs="the-days-8.hbs" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<div class="doc-page-nav">
  <a href={{href-to 'public-pages.docs.the-nav'}} class="doc-page-nav-link-prev">&lt; The nav</a>
  <a href={{href-to 'public-pages.docs.test-helpers'}} class="doc-page-nav-link-next">Test helpers &gt;</a>
</div>
