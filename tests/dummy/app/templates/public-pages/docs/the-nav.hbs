<h1 class="doc-page-title">The nav</h1>

<p>
  Ember Power Calendar is written using contextual components and follows the
  <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0">Presentational and Container Components</a>
  pattern.
</p>

<p>
  The contextual components are <em>mostly</em> presentationals and you can customize
  how they look without much knowledge of how the calendar works. The
  <code>calendar.Nav</code> component is the simplest one.
</p>


<p>
  By default it displays the displayed month in <code>MMMM YYYY</code> format
  and a couple buttons to move to other months. Let's change that.
</p>

<h3>Passing a block</h3>

<p>
  If you pass a block to this component, that block will replace the month/year text. It can
  be used by example if you want to display the month in a different format, maybe a more compact one
  for very small calendars.
</p>

<CodeExample @hbs="the-nav-1.hbs" as |partialName|>
  {{partial partialName}}
</CodeExample>

<h3>Just using the public API</h3>

<p>
  If the thing you want is beyond what you can do with the block, Ember Power Calendar doesn't
  try to provide a miriad of option to configure the component. Instead it gives you the tools to
  build it yourself using the yielded <code>calendar</code>. It's easy!
</p>

<p>
  For example, let's build a different nav that, by reusing the existing CSS classes, allows you to change
  months <em>and years</em>.
</p>

<CodeExample @hbs="the-nav-2.hbs" as |partialName|>
  {{partial partialName}}
</CodeExample>

<h3>Passing your own component</h3>

<p>
  The example above is simple and works if you only have one calendar, but if you have several
  calendars it becomes repetitive. The last way of customizing your calendar is replacing the <code>nav</code>
  component with your own component.
</p>

<p>Let's encapsulate the same logic above into a component and use that instead</p>

<CodeExample @hbs="the-nav-3.hbs" as |partialName|>
  {{partial partialName}}
</CodeExample>

<p>
  Now you have the same logic but to use it the only thing you have to do is tell the calenda to use your component with
  <code>navComponent="name-of-my-component"</code>. Much easier to reuse across your app.
</p>

<p>
  Enough about the nav. Now it's the days turn.
</p>

<div class="doc-page-nav">
  <LinkTo @route="public-pages.docs.i18n" class="doc-page-nav-link-prev">&lt; I18n</LinkTo>
  <LinkTo @route="public-pages.docs.the-days" class="doc-page-nav-link-next">The days &gt;</LinkTo>
</div>
