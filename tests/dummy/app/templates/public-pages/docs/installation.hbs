<h1 class="doc-page-title">Installation &amp; setup</h1>

<p>
  Ember-power-calendar is distributed as an <a href="http://www.ember-cli.com/">Ember-cli</a> addon,
  so the only thing you need to do to install it is run the following command on your ember project directory
</p>

<div class="highlight">
  <pre>
    <code class="language-text" data-lang="text">
      $ ember install ember-power-calendar
    </code>
  </pre>
</div>

<p>But this is not enough to put the calendar to work.</p>

<h3>Choose your preferred date library</h3>

<p>
  Date manipulation is <em>hard</em>. Date internationalization is even harder. That's why this
  component needs help from a third party date library to display and manipulate dates.
</p>

<p>
  From the ones available out there <a href="http://momentjs.com">Moment.js</a> and <a href="">Luxon</a>
  are my favorites, and I created two addons you can choose from to make Ember Power Calendar work
  that use those libraries:
</p>

<ul>
  <li><a href="https://github.com/cibernox/ember-power-calendar-luxon">Ember Power Calendar Luxon</a></li>
  <li><a href="https://github.com/cibernox/ember-power-calendar-moment">Ember Power Calendar Moment</a></li>
  <li><a href="https://github.com/makepanic/ember-power-calendar-date-fns">Ember Power Calendar date-fns</a></li>
</ul>

<p>
  <strong>Note:</strong> Although the calendars should behave the same regardless of the option you choose,
  there might be subtle differences in how dates are displayed, as Moment.js bundles its own translations
  while Luxon uses the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat">Intl.DateTimeFormat</a> native API
  to localize dates into the user's language (that also means Luxon is a lighter library).
</p>

<p>
  Choose the one you prefer and just install it as any other addon, for instance <code>ember install ember-power-calendar-luxon</code>,
  and your calendar will work, but will look ugly.
</p>

<h3>Add the styles</h3>

<p>
  This addon supports styling with Sass, Less, and CSS.
</p>

<h4>Sass</h4>

<p>
  If you are using Sass, all you need to do is import the addon styles with:
</p>

{{code-snippet name="installation-1.scss" classNames="code-sample-snippet" class="active"}}
<br>
<p>
  Doing that will bring in all of the styles except those related to the size of the calendar.
  For defining the size of the calendar there is a mixin that takes the size of the cell
  you want your calendar to be. By example:
</p>

{{code-snippet name="installation-2.scss" classNames="code-sample-snippet" class="active"}}
<br>

<p>
  The <code>ember-power-calendar</code> mixin also allows a great amount of customization regarding the coloring of the
  calendar.
</p>
{{code-snippet name="installation-2a.scss" classNames="code-sample-snippet" class="active"}}
<br>

<h4>Less</h4>

<p>
  For those using Less, the process is very similar. Import the addon styles with:
</p>
{{code-snippet name="installation-3.less" classNames="code-sample-snippet" class="active"}}
<br>

<p>
  The mixin provided can be used like so:
</p>
{{code-snippet name="installation-4.less" classNames="code-sample-snippet" class="active"}}
<br>

<p>
  This code above will make each one of those classes have a different size.
</p>

<h4>CSS</h4>

<p>
  While it is recommended to use Sass or Less in order to take advantage of themeing features,
  some default styles are available in plain CSS as well.
</p>

<p>
  Import the addon styles with:
</p>
{{code-snippet name="installation-5.css" classNames="code-sample-snippet" class="active"}}
<br>

<p>
  Apply one of these classes to your component, depending on the cell size that you want to use:
  <ul>
    <li><code>.ember-power-calendar-default-small</code> for 30px</li>
    <li><code>.ember-power-calendar-default-medium</code> for 50px</li>
    <li><code>.ember-power-calendar-default-large</code> for 70px</li>
  </ul>
</p>

<p>
  For example:
</p>
{{code-snippet name="installation-6.hbs" classNames="code-sample-snippet" class="active"}}
<br>

<p>
  If you are using CSS and want to apply your own styling, you can
  override the default rules provided following regular
  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity" target="_blank" rel="noopener noreferrer">
    CSS specificity.
  </a>
  Developers who want to make major changes to styling are encouraged
  to use Sass or Less instead, since Mixins make this much easier.
</p>

<div class="doc-page-nav">
  <a href={{href-to 'public-pages.docs.index'}} class="doc-page-nav-link-prev">&lt; Overview</a>
  <a href={{href-to 'public-pages.docs.how-to-use-it'}} class="doc-page-nav-link-next">How to use it &gt;</a>
</div>
